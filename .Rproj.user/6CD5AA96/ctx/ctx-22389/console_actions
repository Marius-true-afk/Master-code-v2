{
    "type": [
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "> ",
        "europe <- ne_countries(continent = \"Europe\", returnclass = \"sf\")",
        "> ",
        "> ",
        "# Gjør data om til sf-punkter",
        "> ",
        "herring_sf <- st_as_sf(herring_data, coords = c(\"lon\", \"lat\"), crs = 4326)",
        "> ",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_sf(",
        "+ ",
        "    data = dplyr::filter(",
        "+ ",
        "      herring_sf,",
        "+ ",
        "      country_code == \"NO\"",
        "+ ",
        "    ),",
        "+ ",
        "    color = \"#7d1d53\", fill = \"#7d1d53\"",
        "+ ",
        "  )",
        "\u001BG1;\u001B[1m\u001B[33mError\u001B[39m in `stopifnot()`:\u001B[22m\n\u001B[38;5;232m\u001B[36mℹ\u001B[38;5;232m In argument: `country_code == \"NO\"`.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'country_code' not found\n\u001B[90mRun `\u001B]8;;x-r-run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n\u001Bg",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "> ",
        "# URL: https://public.opendatasoft.com/explore/assets/geonames-all-cities-with-a-population-1000/view/?search=norway&page=1",
        "> ",
        "#install.packages(\"giscoR\")",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(stringr)",
        "> ",
        "library(httr)",
        "> ",
        "library(sf)",
        "> ",
        "library(giscoR)",
        "> ",
        "library(scales)",
        "> ",
        "#",
        "> ",
        "library(readr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(sf)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(rnaturalearth)",
        "> ",
        "library(rnaturalearthdata)",
        "> ",
        "> ",
        "# Definer yttergrenser",
        "> ",
        "lon_min <- -21.9",
        "> ",
        "lon_max <- 49.9",
        "> ",
        "lat_min <- 56.9",
        "> ",
        "lat_max <- 77.1",
        "> ",
        "> ",
        "# Last data",
        "> ",
        "herring_data <- read_csv(\"HerringData.csv\") |> ",
        "+ ",
        "  select(lon, lat) |> ",
        "+ ",
        "  mutate(",
        "+ ",
        "    lat = as.numeric(lat),",
        "+ ",
        "    lon = as.numeric(lon)",
        "+ ",
        "  ) |> ",
        "+ ",
        "  filter(",
        "+ ",
        "    !is.na(lat) & !is.na(lon),",
        "+ ",
        "    lon >= lon_min & lon <= lon_max,",
        "+ ",
        "    lat >= lat_min & lat <= lat_max",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Bakgrunnskart (landpolygoner)",
        "> ",
        "europe <- ne_countries(continent = \"Europe\", returnclass = \"sf\")",
        "> ",
        "norway <- ne_countries(continent = \"Europe\", returnclass = \"sf\", country = \"NO\")",
        "\u001BG1;\u001B[1m\u001B[33mError\u001B[39m in `ne_countries()`:\u001B[22m\n\u001B[38;5;232m\u001B[33m!\u001B[38;5;232m No such country (\u001B[34m\"NO\"\u001B[38;5;232m) in the data.\u001B[39m\n\u001B[90mRun `\u001B]8;;x-r-run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n\u001Bg",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "> ",
        "# URL: https://public.opendatasoft.com/explore/assets/geonames-all-cities-with-a-population-1000/view/?search=norway&page=1",
        "> ",
        "#install.packages(\"giscoR\")",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(stringr)",
        "> ",
        "library(httr)",
        "> ",
        "library(sf)",
        "> ",
        "library(giscoR)",
        "> ",
        "library(scales)",
        "> ",
        "#",
        "> ",
        "library(readr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(sf)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(rnaturalearth)",
        "> ",
        "library(rnaturalearthdata)",
        "> ",
        "> ",
        "# Definer yttergrenser",
        "> ",
        "lon_min <- -21.9",
        "> ",
        "lon_max <- 49.9",
        "> ",
        "lat_min <- 56.9",
        "> ",
        "lat_max <- 77.1",
        "> ",
        "> ",
        "# Last data",
        "> ",
        "herring_data <- read_csv(\"HerringData.csv\") |> ",
        "+ ",
        "  select(lon, lat) |> ",
        "+ ",
        "  mutate(",
        "+ ",
        "    lat = as.numeric(lat),",
        "+ ",
        "    lon = as.numeric(lon)",
        "+ ",
        "  ) |> ",
        "+ ",
        "  filter(",
        "+ ",
        "    !is.na(lat) & !is.na(lon),",
        "+ ",
        "    lon >= lon_min & lon <= lon_max,",
        "+ ",
        "    lat >= lat_min & lat <= lat_max",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Bakgrunnskart (landpolygoner)",
        "> ",
        "europe <- ne_countries(continent = \"Europe\", returnclass = \"sf\")",
        "> ",
        "norway <- ne_countries(continent = \"Europe\", returnclass = \"sf\", country = \"NO\")",
        "\u001BG1;\u001B[1m\u001B[33mError\u001B[39m in `ne_countries()`:\u001B[22m\n\u001B[38;5;232m\u001B[33m!\u001B[38;5;232m No such country (\u001B[34m\"NO\"\u001B[38;5;232m) in the data.\u001B[39m\n\u001B[90mRun `\u001B]8;;x-r-run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n\u001Bg",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "> ",
        "# URL: https://public.opendatasoft.com/explore/assets/geonames-all-cities-with-a-population-1000/view/?search=norway&page=1",
        "> ",
        "#install.packages(\"giscoR\")",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(stringr)",
        "> ",
        "library(httr)",
        "> ",
        "library(sf)",
        "> ",
        "library(giscoR)",
        "> ",
        "library(scales)",
        "> ",
        "#",
        "> ",
        "library(readr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(sf)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(rnaturalearth)",
        "> ",
        "library(rnaturalearthdata)",
        "> ",
        "> ",
        "# Definer yttergrenser",
        "> ",
        "lon_min <- -21.9",
        "> ",
        "lon_max <- 49.9",
        "> ",
        "lat_min <- 56.9",
        "> ",
        "lat_max <- 77.1",
        "> ",
        "> ",
        "# Last data",
        "> ",
        "herring_data <- read_csv(\"HerringData.csv\") |> ",
        "+ ",
        "  select(lon, lat) |> ",
        "+ ",
        "  mutate(",
        "+ ",
        "    lat = as.numeric(lat),",
        "+ ",
        "    lon = as.numeric(lon)",
        "+ ",
        "  ) |> ",
        "+ ",
        "  filter(",
        "+ ",
        "    !is.na(lat) & !is.na(lon),",
        "+ ",
        "    lon >= lon_min & lon <= lon_max,",
        "+ ",
        "    lat >= lat_min & lat <= lat_max",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Bakgrunnskart (landpolygoner)",
        "> ",
        "europe <- ne_countries(continent = \"Europe\", returnclass = \"sf\")",
        "> ",
        "NO <- subset(ne_countries(), iso_a2_eh==\"NO\", select = c(name, iso_a2, iso_a2_eh, iso_a3, iso_a3_eh))",
        "> ",
        "> ",
        "# Gjør data om til sf-punkter",
        "> ",
        "herring_sf <- st_as_sf(herring_data, coords = c(\"lon\", \"lat\"), crs = 4326)",
        "> ",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_sf(",
        "+ ",
        "    data = dplyr::filter(",
        "+ ",
        "      herring_sf,",
        "+ ",
        "      NO,",
        "+ ",
        "    ),",
        "+ ",
        "    color = \"#7d1d53\", fill = \"#7d1d53\"",
        "+ ",
        "  )",
        "\u001BG1;\u001B[1m\u001B[33mError\u001B[39m in `stopifnot()`:\u001B[22m\n\u001B[38;5;232m\u001B[36mℹ\u001B[38;5;232m In argument: `NO`.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[38;5;232m\u001B[33m!\u001B[38;5;232m `..1$name` must be a logical vector, not the string \"Norway\".\u001B[39m\n\u001B[90mRun `\u001B]8;;x-r-run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n\u001Bg",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "#| echo: false",
        "> ",
        "> ",
        "#install.packages(\"prettymapr\")",
        "> ",
        "#install.packages(\"ggspatial\")",
        "> ",
        "#install.packages(\"rnaturalearth\")",
        "> ",
        "#install.packages(\"rnaturalearthdata\")",
        "> ",
        "#install.packages(\"maps\")",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(maps)",
        "> ",
        "library(stringr)",
        "> ",
        "library(here)",
        "> ",
        "library(sf)",
        "> ",
        "library(rnaturalearth)",
        "> ",
        "library(rnaturalearthdata)",
        "> ",
        "library(ggspatial)",
        "> ",
        "library(prettymapr)",
        "> ",
        "> ",
        "herring_data_raw <- read.csv(",
        "+ ",
        "  here(\"HerringData.csv\")) #currently stored as chr",
        "> ",
        "> ",
        "herring_data_sorted <- herring_data_raw |> ",
        "+ ",
        "  mutate(",
        "+ ",
        "    lat = as.numeric(lat),",
        "+ ",
        "    lon = as.numeric(lon)",
        "+ ",
        "  )",
        "> ",
        "> ",
        "herring_data_clean <- herring_data_sorted[!is.na(herring_data_sorted$lon) & !is.na(herring_data_sorted$lat), ]",
        "> ",
        "> ",
        "herring_data_ready <- st_as_sf(herring_data_clean, coords = c(\"lon\", \"lat\"), crs = 4326)",
        "> ",
        "> ",
        "# with rnaturalearth",
        "> ",
        "europe <- ne_countries(continent = \"Europe\", returnclass = \"sf\")",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_sf(data = europe) +",
        "+ ",
        "  geom_sf(data = herring_data_ready, colour = \"red\") +",
        "+ ",
        "  #coord_sf(xlim = c(0, 30), ylim = c(55, 74))",
        "+ ",
        "  coord_sf(xlim = c(-21, 50), ylim = c(5, 81))",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "> ",
        "library(readr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(sf)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(rnaturalearth)",
        "> ",
        "library(rnaturalearthdata)",
        "> ",
        "> ",
        "# Definer yttergrenser",
        "> ",
        "lon_min <- -21.9",
        "> ",
        "lon_max <- 49.9",
        "> ",
        "lat_min <- 56.9",
        "> ",
        "lat_max <- 77.1",
        "> ",
        "> ",
        "# Last data",
        "> ",
        "herring_data <- read_csv(\"HerringData.csv\") |> ",
        "+ ",
        "  select(lon, lat) |> ",
        "+ ",
        "  mutate(",
        "+ ",
        "    lat = as.numeric(lat),",
        "+ ",
        "    lon = as.numeric(lon)",
        "+ ",
        "  ) |> ",
        "+ ",
        "  filter(",
        "+ ",
        "    !is.na(lat) & !is.na(lon),",
        "+ ",
        "    lon >= lon_min & lon <= lon_max,",
        "+ ",
        "    lat >= lat_min & lat <= lat_max",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Bakgrunnskart (landpolygoner)",
        "> ",
        "europe <- ne_countries(continent = \"Europe\", returnclass = \"sf\")",
        "> ",
        "> ",
        "# Gjør data om til sf-punkter",
        "> ",
        "herring_sf <- st_as_sf(herring_data, coords = c(\"lon\", \"lat\"), crs = 4326)",
        "> ",
        "> ",
        "# Slå av s2 for å unngå feil i intersect: https://r.geocompx.org/spatial-class section 2.2.9",
        "> ",
        "sf_use_s2(FALSE)",
        "> ",
        "> ",
        "# Finn punkter som ligger på land (TRUE hvis punkt treffer minst ett landpolygon)",
        "> ",
        "on_land <- rowSums(st_intersects(herring_sf, europe, sparse = FALSE)) > 0",
        "> ",
        "> ",
        "# Filtrer vekk punkter som ligger på land",
        "> ",
        "herring_sf_clean <- herring_sf[!on_land, ]",
        "> ",
        "> ",
        "# Lagre renset data",
        "> ",
        "save(herring_sf_clean, file = \"herring_data_clean.rda\")",
        "> ",
        "> ",
        "# --- Telle-oversikt ---",
        "> ",
        "cat(\"Totalt antall punkter:\", nrow(herring_sf), \"\\n\")",
        "Totalt antall punkter: 406016 \n",
        "> ",
        "cat(\"Antall punkter på hav:\", nrow(herring_sf_clean), \"\\n\")",
        "Antall punkter på hav: 343900 \n",
        "> ",
        "cat(\"Antall punkter på land (fjernet):\", sum(on_land), \"\\n\")",
        "Antall punkter på land (fjernet): 62116 \n",
        "> ",
        "> ",
        "# --- Sjekk kart ---",
        "> ",
        "# Alle punkter (før filtrering)",
        "> ",
        "all_points <- herring_sf",
        "> ",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_sf(data = europe, fill = \"antiquewhite\", color = \"gray60\") +",
        "+ ",
        "  geom_sf(data = all_points, color = \"red\", alpha = 0.5, size = 1) +",
        "+ ",
        "  geom_sf(data = herring_sf_clean, color = \"blue\", alpha = 0.7, size = 1.5) +",
        "+ ",
        "  coord_sf(xlim = c(lon_min, lon_max), ylim = c(lat_min, lat_max)) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(",
        "+ ",
        "    title = \"Sildedata – sjekk av punkter\",",
        "+ ",
        "    subtitle = \"Røde = alle punkter, Blå = etter filtrering (på hav)\",",
        "+ ",
        "    x = \"Longitude\",",
        "+ ",
        "    y = \"Latitude\"",
        "+ ",
        "  )",
        "> ",
        "View(herring_data)",
        "> ",
        "View(herring_data_clean)",
        "\u001BG3;Restarting R session...\u001Bg",
        "[1] \"LC_COLLATE=Norwegian_Norway.utf8;LC_CTYPE=Norwegian_Norway.utf8;LC_MONETARY=Norwegian_Norway.utf8;LC_NUMERIC=C;LC_TIME=Norwegian_Norway.utf8\"\n",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "#| echo: false",
        "> ",
        "> ",
        "#install.packages(\"prettymapr\")",
        "> ",
        "#install.packages(\"ggspatial\")",
        "> ",
        "#install.packages(\"rnaturalearth\")",
        "> ",
        "#install.packages(\"rnaturalearthdata\")",
        "> ",
        "#install.packages(\"maps\")",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "> ",
        "library(ggplot2)",
        "\u001BG3;Restarting R session...\u001Bg",
        "[1] \"LC_COLLATE=Norwegian_Norway.utf8;LC_CTYPE=Norwegian_Norway.utf8;LC_MONETARY=Norwegian_Norway.utf8;LC_NUMERIC=C;LC_TIME=Norwegian_Norway.utf8\"\n",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "> ",
        "library(readr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(sf)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(rnaturalearth)",
        "> ",
        "library(rnaturalearthdata)",
        "> ",
        "> ",
        "# Definer yttergrenser",
        "> ",
        "lon_min <- -21.9",
        "> ",
        "lon_max <- 49.9",
        "> ",
        "lat_min <- 56.9",
        "> ",
        "lat_max <- 77.1",
        "> ",
        "> ",
        "# Last data",
        "> ",
        "herring_data <- read_csv(\"HerringData.csv\") |> ",
        "+ ",
        "  select(lon, lat) |> ",
        "+ ",
        "  mutate(",
        "+ ",
        "    lat = as.numeric(lat),",
        "+ ",
        "    lon = as.numeric(lon)",
        "+ ",
        "  ) |> ",
        "+ ",
        "  filter(",
        "+ ",
        "    !is.na(lat) & !is.na(lon),",
        "+ ",
        "    lon >= lon_min & lon <= lon_max,",
        "+ ",
        "    lat >= lat_min & lat <= lat_max",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Bakgrunnskart (landpolygoner)",
        "> ",
        "europe <- ne_countries(continent = \"Europe\", returnclass = \"sf\")",
        "> ",
        "> ",
        "# Gjør data om til sf-punkter",
        "> ",
        "herring_sf <- st_as_sf(herring_data, coords = c(\"lon\", \"lat\"), crs = 4326)",
        "> ",
        "> ",
        "# Slå av s2 for å unngå feil i intersect: https://r.geocompx.org/spatial-class section 2.2.9",
        "> ",
        "sf_use_s2(FALSE)",
        "> ",
        "> ",
        "# Finn punkter som ligger på land (TRUE hvis punkt treffer minst ett landpolygon)",
        "> ",
        "on_land <- rowSums(st_intersects(herring_sf, europe, sparse = FALSE)) > 0",
        "> ",
        "> ",
        "# Filtrer vekk punkter som ligger på land",
        "> ",
        "herring_sf_clean <- herring_sf[!on_land, ]",
        "> ",
        "> ",
        "# Lagre renset data",
        "> ",
        "save(herring_sf_clean, file = \"herring_data_clean.rda\")",
        "> ",
        "> ",
        "# --- Telle-oversikt ---",
        "> ",
        "cat(\"Totalt antall punkter:\", nrow(herring_sf), \"\\n\")",
        "Totalt antall punkter: 406016 \n",
        "> ",
        "cat(\"Antall punkter på hav:\", nrow(herring_sf_clean), \"\\n\")",
        "Antall punkter på hav: 343900 \n",
        "> ",
        "cat(\"Antall punkter på land (fjernet):\", sum(on_land), \"\\n\")",
        "Antall punkter på land (fjernet): 62116 \n",
        "> ",
        "> ",
        "# --- Sjekk kart ---",
        "> ",
        "# Alle punkter (før filtrering)",
        "> ",
        "all_points <- herring_sf",
        "> ",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_sf(data = europe, fill = \"antiquewhite\", color = \"gray60\") +",
        "+ ",
        "  geom_sf(data = all_points, color = \"red\", alpha = 0.5, size = 1) +",
        "+ ",
        "  geom_sf(data = herring_sf_clean, color = \"blue\", alpha = 0.7, size = 1.5) +",
        "+ ",
        "  coord_sf(xlim = c(lon_min, lon_max), ylim = c(lat_min, lat_max)) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(",
        "+ ",
        "    title = \"Sildedata – sjekk av punkter\",",
        "+ ",
        "    subtitle = \"Røde = alle punkter, Blå = etter filtrering (på hav)\",",
        "+ ",
        "    x = \"Longitude\",",
        "+ ",
        "    y = \"Latitude\"",
        "+ ",
        "  )",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "> ",
        "library(readr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(sf)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(rnaturalearth)",
        "> ",
        "library(rnaturalearthdata)",
        "> ",
        "> ",
        "# Definer yttergrenser",
        "> ",
        "lon_min <- -21.9",
        "> ",
        "lon_max <- 49.9",
        "> ",
        "lat_min <- 56.9",
        "> ",
        "lat_max <- 77.1",
        "> ",
        "> ",
        "# Last data",
        "> ",
        "herring_data <- read_csv(\"HerringData.csv\") |> ",
        "+ ",
        "  select(lon, lat) |> ",
        "+ ",
        "  mutate(",
        "+ ",
        "    lat = as.numeric(lat),",
        "+ ",
        "    lon = as.numeric(lon)",
        "+ ",
        "  ) |> ",
        "+ ",
        "  filter(",
        "+ ",
        "    !is.na(lat) & !is.na(lon),",
        "+ ",
        "    lon >= lon_min & lon <= lon_max,",
        "+ ",
        "    lat >= lat_min & lat <= lat_max",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Bakgrunnskart (landpolygoner)",
        "> ",
        "europe <- ne_countries(continent = \"Europe\", returnclass = \"sf\")",
        "> ",
        "> ",
        "# Gjør data om til sf-punkter",
        "> ",
        "herring_sf <- st_as_sf(herring_data, coords = c(\"lon\", \"lat\"), crs = 4326)",
        "> ",
        "> ",
        "# Slå av s2 for å unngå feil i intersect: https://r.geocompx.org/spatial-class section 2.2.9",
        "> ",
        "sf_use_s2(FALSE)",
        "> ",
        "> ",
        "# Sjekker om hvert punkt av herring_sf krysser _minst_ et land. Treffer det _minst_ et land returneres TRUE",
        "> ",
        "on_land <- rowSums(st_intersects(herring_sf, europe, sparse = FALSE)) > 0",
        "> ",
        "> ",
        "# Filtrer vekk punkter som ligger på land",
        "> ",
        "herring_sf_clean <- herring_sf[!on_land, ]",
        "> ",
        "> ",
        "# Lagre renset data",
        "> ",
        "save(herring_sf_clean, file = \"herring_data_clean.rda\")",
        "> ",
        "> ",
        "# --- Telle-oversikt ---",
        "> ",
        "cat(\"Totalt antall punkter:\", nrow(herring_sf), \"\\n\")",
        "Totalt antall punkter: 406016 \n",
        "> ",
        "cat(\"Antall punkter på hav:\", nrow(herring_sf_clean), \"\\n\")",
        "Antall punkter på hav: 343900 \n",
        "> ",
        "cat(\"Antall punkter på land (fjernet):\", sum(on_land), \"\\n\")",
        "Antall punkter på land (fjernet): 62116 \n",
        "> ",
        "> ",
        "# --- Sjekk kart ---",
        "> ",
        "# Alle punkter (før filtrering)",
        "> ",
        "all_points <- herring_sf",
        "> ",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_sf(data = europe, ...) +          # tegner landpolygoner",
        "+ ",
        "  geom_sf(data = all_points, ...) +      # røde = alle punkter",
        "+ ",
        "  geom_sf(data = herring_sf_clean, ...)  # blå = punkter på hav",
        "\u001BG1;\u001BH1;Error\u001Bh: '...' used in an incorrect context\n\u001Bg",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "> ",
        "library(readr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(sf)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(rnaturalearth)",
        "> ",
        "library(rnaturalearthdata)",
        "> ",
        "> ",
        "# Definer yttergrenser",
        "> ",
        "lon_min <- -21.9",
        "> ",
        "lon_max <- 49.9",
        "> ",
        "lat_min <- 56.9",
        "> ",
        "lat_max <- 77.1",
        "> ",
        "> ",
        "# Last data",
        "> ",
        "herring_data <- read_csv(\"HerringData.csv\") |> ",
        "+ ",
        "  select(lon, lat) |> ",
        "+ ",
        "  mutate(",
        "+ ",
        "    lat = as.numeric(lat),",
        "+ ",
        "    lon = as.numeric(lon)",
        "+ ",
        "  ) |> ",
        "+ ",
        "  filter(",
        "+ ",
        "    !is.na(lat) & !is.na(lon),",
        "+ ",
        "    lon >= lon_min & lon <= lon_max,",
        "+ ",
        "    lat >= lat_min & lat <= lat_max",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Bakgrunnskart (landpolygoner)",
        "> ",
        "europe <- ne_countries(continent = \"Europe\", returnclass = \"sf\")",
        "> ",
        "> ",
        "# Gjør data om til sf-punkter",
        "> ",
        "herring_sf <- st_as_sf(herring_data, coords = c(\"lon\", \"lat\"), crs = 4326)",
        "> ",
        "> ",
        "# Slå av s2 for å unngå feil i intersect: https://r.geocompx.org/spatial-class section 2.2.9",
        "> ",
        "sf_use_s2(FALSE)",
        "> ",
        "> ",
        "# Sjekker om hvert punkt av herring_sf krysser _minst_ et land. Treffer det _minst_ et land returneres TRUE",
        "> ",
        "on_land <- rowSums(st_intersects(herring_sf, europe, sparse = FALSE)) > 0",
        "> ",
        "> ",
        "# Filtrer vekk punkter som ligger på land",
        "> ",
        "herring_sf_clean <- herring_sf[!on_land, ]",
        "> ",
        "> ",
        "# Lagre renset data",
        "> ",
        "save(herring_sf_clean, file = \"herring_data_clean.rda\")",
        "> ",
        "> ",
        "# --- Telle-oversikt ---",
        "> ",
        "cat(\"Totalt antall punkter:\", nrow(herring_sf), \"\\n\")",
        "Totalt antall punkter: 406016 \n",
        "> ",
        "cat(\"Antall punkter på hav:\", nrow(herring_sf_clean), \"\\n\")",
        "Antall punkter på hav: 343900 \n",
        "> ",
        "cat(\"Antall punkter på land (fjernet):\", sum(on_land), \"\\n\")",
        "Antall punkter på land (fjernet): 62116 \n",
        "> ",
        "> ",
        "# --- Sjekk kart ---",
        "> ",
        "# Alle punkter (før filtrering)",
        "> ",
        "all_points <- herring_sf",
        "> ",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_sf(data = europe) +          # tegner landpolygoner",
        "+ ",
        "  geom_sf(data = all_points) +      # røde = alle punkter",
        "+ ",
        "  geom_sf(data = herring_sf_clean)  # blå = punkter på hav",
        "> ",
        "> ",
        "#| message: false",
        "> ",
        "#| warning: false",
        "> ",
        "> ",
        "library(readr)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(sf)",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(rnaturalearth)",
        "> ",
        "library(rnaturalearthdata)",
        "> ",
        "> ",
        "# Definer yttergrenser",
        "> ",
        "lon_min <- -21.9",
        "> ",
        "lon_max <- 49.9",
        "> ",
        "lat_min <- 56.9",
        "> ",
        "lat_max <- 77.1",
        "> ",
        "> ",
        "# Last data",
        "> ",
        "herring_data <- read_csv(\"HerringData.csv\") |> ",
        "+ ",
        "  select(lon, lat) |> ",
        "+ ",
        "  mutate(",
        "+ ",
        "    lat = as.numeric(lat),",
        "+ ",
        "    lon = as.numeric(lon)",
        "+ ",
        "  ) |> ",
        "+ ",
        "  filter(",
        "+ ",
        "    !is.na(lat) & !is.na(lon),",
        "+ ",
        "    lon >= lon_min & lon <= lon_max,",
        "+ ",
        "    lat >= lat_min & lat <= lat_max",
        "+ ",
        "  )",
        "> ",
        "> ",
        "# Bakgrunnskart (landpolygoner)",
        "> ",
        "europe <- ne_countries(continent = \"Europe\", returnclass = \"sf\")",
        "> ",
        "> ",
        "# Gjør data om til sf-punkter",
        "> ",
        "herring_sf <- st_as_sf(herring_data, coords = c(\"lon\", \"lat\"), crs = 4326)",
        "> ",
        "> ",
        "# Slå av s2 for å unngå feil i intersect: https://r.geocompx.org/spatial-class section 2.2.9",
        "> ",
        "sf_use_s2(FALSE)",
        "> ",
        "> ",
        "# Sjekker om hvert punkt av herring_sf krysser _minst_ et land. Treffer det _minst_ et land returneres TRUE",
        "> ",
        "on_land <- rowSums(st_intersects(herring_sf, europe, sparse = FALSE)) > 0",
        "> ",
        "> ",
        "# Filtrer vekk punkter som ligger på land",
        "> ",
        "herring_sf_clean <- herring_sf[!on_land, ]",
        "> ",
        "> ",
        "# Lagre renset data",
        "> ",
        "save(herring_sf_clean, file = \"herring_data_clean.rda\")",
        "> ",
        "> ",
        "# --- Telle-oversikt ---",
        "> ",
        "cat(\"Totalt antall punkter:\", nrow(herring_sf), \"\\n\")",
        "Totalt antall punkter: 406016 \n",
        "> ",
        "cat(\"Antall punkter på hav:\", nrow(herring_sf_clean), \"\\n\")",
        "Antall punkter på hav: 343900 \n",
        "> ",
        "cat(\"Antall punkter på land (fjernet):\", sum(on_land), \"\\n\")",
        "Antall punkter på land (fjernet): 62116 \n",
        "> ",
        "> ",
        "# --- Sjekk kart ---",
        "> ",
        "# Alle punkter (før filtrering)",
        "> ",
        "all_points <- herring_sf",
        "> ",
        "> ",
        "ggplot() +",
        "+ ",
        "  geom_sf(data = europe, fill = \"antiquewhite\", color = \"gray60\") +",
        "+ ",
        "  geom_sf(data = all_points, color = \"red\", alpha = 0.5, size = 1) +",
        "+ ",
        "  geom_sf(data = herring_sf_clean, color = \"blue\", alpha = 0.7, size = 1.5) +",
        "+ ",
        "  coord_sf(xlim = c(lon_min, lon_max), ylim = c(lat_min, lat_max)) +",
        "+ ",
        "  theme_minimal() +",
        "+ ",
        "  labs(",
        "+ ",
        "    title = \"Sildedata – sjekk av punkter\",",
        "+ ",
        "    subtitle = \"Røde = alle punkter, Blå = etter filtrering (på hav)\",",
        "+ ",
        "    x = \"Longitude\",",
        "+ ",
        "    y = \"Latitude\"",
        "+ ",
        "  )",
        "\u001BG3;Restarting R session...\u001Bg"
    ]
}